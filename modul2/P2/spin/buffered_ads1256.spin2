con
  ' mirror the ones of the underlying object
  #0, STATUS, MUX, ADCON, DRATE, IO, OFC0, OFC1, OFC2, FSC0, FSC1, FSC2
  #100, IWREG, IRREG, IRSSC, ICDAC

  RX1     = 35  { I }                                           ' programming / debug
  TX1     = 37  { O }
  BR_TERM  = 115_200                                            ' terminal baud rate

var
  long cog
  long stack[128]
  long instruction
  long a, b
  long output_buffer_address
  long output_buffer_size
obj
  adc : "ads1256"
  'term : "jm_fullduplexserial"

pub start(sdi, sdo, clk, cs, drdy, pdwn, output_buffer_address) : result
  ' The protocol for the output_buffer_address is as follows:
  '
  ' It points to a buffer of longs. The first two longs are
  ' the read and write position in into the following ring-buffer
  ' elements. On start we expect the read position to hold the
  ' size of the ring-buffer, but in double-longs! This
  ' is due to each entry being a (timestamp, mux:value)
  cog := cogspin(NEWCOG, main(sdi, sdo, clk, cs, drdy, pdwn, output_buffer_address, cogid()), @stack)
  waitatn
  return cog + 1

pub wreg(register, value)
  instruction := IWREG
  a := register
  b := value
  cogatn(1 << cog)
  waitatn

pub rreg(start, count): result
  instruction := IRREG
  a := start
  b := count
  cogatn(1 << cog)
  waitatn
  return a

pub read_single_sided(channel): result
  instruction := IRSSC
  a := channel
  cogatn(1 << cog)
  waitatn
  return a

pub start_continuous_read(mux_buffer_address, mux_buffer_size)
  ' The contennts of mux_buffer_address
  ' is expected to stay constant during the
  ' continuous data acquisition, as it contains
  ' the mux register values that are being issued
  instruction := ICDAC
  a := mux_buffer_address
  b := mux_buffer_size
  cogatn(1 << cog)

pub read_continuous | rpos, timestamp, mux, value
  repeat until available > 0
  rpos := LONG[output_buffer_address][0]
  ' +2 to skip read/write, << 1 adjusts for our 2-long entry size
  timestamp := LONG[output_buffer_address][2 + (rpos << 1)]
  value := LONG[output_buffer_address][2 + (rpos << 1) + 1]
  mux := value >> 24
  value &= $ffffff
  LONG[output_buffer_address][0] := (rpos + 1) +// output_buffer_size
  return timestamp, mux, value

pub available: result
  ' (write + size - read) % size
  result := (LONG[output_buffer_address][1] + output_buffer_size - LONG[output_buffer_address][0]) +// output_buffer_size
  return result

pri main(sdi, sdo, clk, cs, drdy, pdwn, output_buffer_address_, caller_cog)
  'term.start(RX1, TX1, %0000, BR_TERM)
  'term.fstr0(string("cog running\r\n"))
  output_buffer_address := output_buffer_address_
  output_buffer_size := LONG[output_buffer_address]
  LONG[output_buffer_address][0] := 0 ' read pos
  LONG[output_buffer_address][1] := 0 ' write pos

  adc.start(sdi, sdo, clk, cs, drdy, pdwn)
  repeat
    cogatn(1 << caller_cog)
    waitatn
    'term.fstr0(string("got instruction\r\n"))

    case instruction
       IWREG:
        'term.fstr0(string("instruction: IWREG\r\n"))
        adc.wreg(a, b)
       IRREG:
        a := adc.rreg(a, b)
        'term.fstr1(string("instruction: IRREG: \%%8.8b\r\n"), a)
       IRSSC:
        a := adc.read_single_sided(a)
        'term.fstr1(string("instruction: IRSSC: %8x\r\n"), a)
       ICDAC:
         'term.fstr0(string("got ICDAC"))
         cdac(a, b)

pri cdac(mux_buffer_address, mux_buffer_size) | last_mux, buf_pos, now, value
    last_mux := BYTE[mux_buffer_address][0]
    if mux_buffer_size == 1
      ' special case: we do not really need to
      ' perform the protocol laid out in P19 of
      ' the datasheet. Instead just read following
      ' drdy
      adc.wreg(adc.MUX, last_mux)
      adc.sync
      adc.wakeup
      repeat until pollatn == -1
        adc.drdycycle
        now := cnt
        value := adc.rdata
        'term.fstr2(string("ICDAC MUX 0x%2.2x: %8x\r\n"), last_mux, value)
    else
      buf_pos := 1
      adc.wreg(adc.MUX, last_mux)
      adc.sync
      adc.wakeup
      repeat until pollatn == -1
        adc.drdycycle
        now := cnt
        ' we first instruct the adc
        ' to change the input, as this allows
        ' it to settle and sample while
        ' the last read value is still retained
        adc.wreg(adc.MUX, BYTE[mux_buffer_address][buf_pos])
        adc.sync
        adc.wakeup
        ' only now we read the data + put it out
        value := adc.rdata
        'term.fstr2(string("ICDAC MUX 0x%2.2x: %8x\r\n"), last_mux, value)
        store(now, last_mux, value)
        'term.fstr1(string("ICDAC wpos %8.8x\r\n"), LONG[output_buffer_address][1])
        last_mux := BYTE[mux_buffer_address][buf_pos]
        buf_pos := (buf_pos + 1) +// mux_buffer_size

pri store(timestamp, mux, value) | wpos
  wpos := LONG[output_buffer_address][1]
  'term.fstr1(string("ICDAC wpos %8.8x\r\n"), wpos)
  ' the +2 skips read/write, the << 1 takes care
  ' of the two-long data entry we are dealing with
  LONG[output_buffer_address][2 + wpos << 1] := timestamp
  LONG[output_buffer_address][2 + (wpos << 1) + 1] := (mux << 24 | value)
  wpos := (wpos + 1) +// output_buffer_size
  LONG[output_buffer_address][1] := wpos
