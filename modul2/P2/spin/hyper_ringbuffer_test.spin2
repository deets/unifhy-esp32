con
  _clkfreq = 300_000_000

  ' A propplug on a header
  RX0     = 35
  TX0     = 37
  BR_SERIAL = 1_000_000

  DEBUG_BAUD  = 2_000_000

  DATAGRAM_SIZE = 8 ' two longs, timestamp:mux:value
  BUFFER_CAPACITY = 7500 * 10 '16_000_000 / DATAGRAM_SIZE

  ADC_BUFFER_SIZE = 100
  ADC_CLK = 16
  ADC_SDO = 17
  ADC_SDI = 18
  ADC_DRDY = 19
  ADC_CS = 20
  ADC_PDWN = 21

  ' A propplug on a header
  RX0     = 35
  TX0     = 37
  BR_SERIAL = 1_000_000

  LINE_SIZE = 20 '<8>:<2>:<6>\r\n
  ' buttons and leds
  IO_OFFSET = 40
  LED_0 = 0
  LED_1 = 1
  LED_2 = 3
  LED_3 = 2
  SWITCH_0 = 4
  SWITCH_1 = 5
  SWITCH_2 = 7
  SWITCH_3 = 6
var
  long stack[2048]

  '
  LONG values_read

  ' The following three items are the ringbuffer
  ' for the buffered reader.
  LONG read
  LONG write
  LONG buffer[ADC_BUFFER_SIZE * 2]
  ' here comes the mux buffer that
  ' holds the channel selection for
  ' the ADC
  BYTE mux_buffer[8]
  BYTE mux_buffer_length

  'BYTE rb_buffer[DATAGRAM_SIZE * BUFFER_CAPACITY]
  byte line_buffer[LINE_SIZE]
obj
  adc: "buffered_ads1256"
  rb: "hyper_ringbuffer"
  serial: "jm_fullduplexserial"
  util: "util"

pub main() | timestamp, mux, value, reader_cog, h, start, use_sd
  pinsetup()
  rb.init(DATAGRAM_SIZE, BUFFER_CAPACITY, 0)
  debug("capacity:", udec(BUFFER_CAPACITY))
  adc_init()

  repeat
    use_sd := waitpins()
    debug("start ", udec(use_sd))
    values_read := 0
    reader_cog := cogspin(NEWCOG, reader(use_sd), @stack)
    adc.start_continuous_read(@mux_buffer, mux_buffer_length)
    start := getsec()

    repeat values_read from 0 to BUFFER_CAPACITY - 2
      timestamp, mux, value := adc.read_continuous()
      feed(timestamp, mux, value)

    adc.stop_continuous_read()
    h := getsec() - start
    debug("writing took: ", udec(h))
    ' notify the reader cog
    ' that we are done
    cogatn(1 << reader_cog)

pri waitpins(): result | use_sd
  result := 0
  repeat
    result := pinread(IO_OFFSET + SWITCH_0 addpins 3)
    use_sd := (result & 2) ? 1 : 0
    if result & 1
      quit
  result := use_sd

pri pinsetup() | btnpins
  btnpins := IO_OFFSET + SWITCH_0 addpins 3                     ' buttons are base+4..base+7
  wrpin(btnpins, P_LOW_15K)                                     ' select 15K pull-downs
  pinlow(btnpins)                                               ' activate pull-downs

pri adc_init()
  read := ADC_BUFFER_SIZE
  adc.start(ADC_SDI, ADC_SDO, ADC_CLK, ADC_CS, ADC_DRDY, ADC_PDWN, @read)
  mux_buffer[0] := $08 ' channel 0, single-sided
  mux_buffer_length := 1
  adc.wreg(adc.RDRATE, %11010000) ' 7500
  'adc.wreg(adc.RDRATE, %00000011) ' 2.5

pri feed(timestamp, mux, value) | entry[2]
  entry[0] := timestamp
  entry[1] := mux << 24 | value & $00ffffff
  rb.store(@entry)

pri reader(use_sd) | entry[2], count, success
  serial.start(RX0, TX0, %0000, BR_SERIAL)

  count := 0
  pollatn()
  repeat until pollatn() == -1
    repeat while rb.available()
      rb.fetch(@entry)
      count += 1
      prepare_line(entry[0], entry[1])
      serial.str(@line_buffer)

  serial.fstr0(string("done\r\n"))
  debug("reading done")
  repeat
pri prepare_line(timestamp, value):result | mux, pos, err
  mux := value >> 24
  value &= $ffffff
  line_buffer[0] := "D"
  line_buffer[1] := ":"
  pos := 2
  pos += util.encode_hex_nibbles(@line_buffer + pos, timestamp, 8)
  line_buffer[pos] := ":"
  pos += 1
  pos += util.encode_hex_byte(@line_buffer + pos, mux)
  line_buffer[pos] := ":"
  pos += 1
  pos += util.encode_hex_nibbles(@line_buffer + pos, value, 6)
  line_buffer[pos] := 13
  line_buffer[pos + 1] := 10
  pos += 2
  line_buffer[pos] := 0
  return pos
