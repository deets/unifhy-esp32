con
  ' P2 Eval Board Assignment
  SD_DO = 58
  SD_DI = 59
  SD_CS = 60
  SD_CLK = 61

  LINE_SIZE = 20 '<8>:<2>:<6>\r\n
  DATAGRAM_SIZE = 8 ' two longs, timestamp:mux:value
  BUFFER_CAPACITY = 50000
  FLUSH_AFTER_BYTES = 512

  SD_STATUS_PIN = 25

var
  byte cmd, cog, caller_cog, running
  word file_index
  byte filename[13]
  long stack[2048]
  long buffer[DATAGRAM_SIZE / 4 * BUFFER_CAPACITY]
  long entry[2]
  byte line_buffer[LINE_SIZE]
  long write_entry[2]
  long byte_counter
  long total_samples, avg_timediff, max_timediff, max_sample
obj
  fat: "FAT32"
  util: "util"
  rb: "ringbuffer"

pub start() : result
  rb.init(DATAGRAM_SIZE, BUFFER_CAPACITY, @buffer)
  cog := cogspin(NEWCOG, main(cogid()), @stack)
  waitatn()
  return cog + 1

pri main(caller_cog_) | success
  running := 0
  pinhigh(SD_STATUS_PIN)
  caller_cog := caller_cog_
  success := fat.FATEngineStart(SD_DO, SD_CLK, SD_DI, SD_CS, 0)
  debug(zstr(string("fatenginestart:")))
  debug(udec(success))
  cogatn(1 << caller_cog)

  debug(zstr(string("mount:")))
  success := \fat.mountPartition(0)
  if success > 0
    debug(zstr(string("mounting failed")))
    debug(zstr(success))
  else
    file_index := find_last_file_index() + 1
    debug(zstr(string("file_index")))
    debug(uhex_word(file_index))
    pinlow(SD_STATUS_PIN)
    running := 1

  mainloop()

pub begin()
  if running > 0
    cmd := "b"
    cogatn(1 << cog)
    waitatn()

pub end(total_samples_, avg_timediff_, max_timediff_, max_sample_)
  ' we don't need a command, begin
  ' put us into a loop that we
  ' leave using atn
  bytemove(@total_samples, @total_samples_, 4 * 4)
  cogatn(1 << cog)
  waitatn()

pub feed(timestamp, mux, value)
  entry[0] := timestamp
  entry[1] := mux << 24 | value & $00ffffff
  rb.store(@entry)

pri mainloop()
  repeat
    waitatn()
    case cmd
      "b" : sync_cmd_begin()
    cmd := "0"

pri sync_cmd_begin() | success
  debug(zstr(string("sync_cmd_begin")))
  bytemove(@filename, string("RQADSXXX.DAT"), 12)
  filename[12] := 0
  util.encode_hex_nibbles(@filename + 5, file_index, 3)
  file_index += 1
  debug(zstr(@filename))
  success := \fat.newFile(@filename)
  if success <> 0
    debug(zstr(string("fat.newFile:error")))
    debug(zstr(success))
  fat.openFile(@filename, "W")
  debug(zstr(string("fat.newFile")))
  debug(udec(result))
  cogatn(1 << caller_cog)

  byte_counter := 0
  repeat until pollatn() == -1
    write_buffer()
  ' cleanup and signal the end call
  write_buffer()
  write_statistics_line()
  fat.flushData()
  fat.closeFile()
  cogatn(1 << caller_cog)

pri write_buffer()
  repeat while rb.available()
    byte_counter += write_line()
    if byte_counter >= FLUSH_AFTER_BYTES
      fat.flushData()
      byte_counter := 0

pri write_line(): result | mux, value, pos, err
  rb.fetch(@write_entry)
  mux := write_entry[1] >> 24
  line_buffer[0] := "D"
  line_buffer[1] := ":"
  pos := 2
  value := write_entry[0]
  pos += util.encode_hex_nibbles(@line_buffer + pos, value, 8)
  line_buffer[pos] := ":"
  pos += 1
  pos += util.encode_hex_byte(@line_buffer + pos, mux)
  line_buffer[pos] := ":"
  pos += 1
  value := write_entry[1] & $ffffff
  pos += util.encode_hex_nibbles(@line_buffer + pos, value, 6)
  line_buffer[pos] := 10
  'line_buffer[pos + 1] := 10
  pos += 1
  line_buffer[pos] := 0
  err := fat.writeData(@line_buffer, pos)
  if err <> pos
    debug("writeData:error", zstr(err))
    pinhigh(SD_STATUS_PIN)
  return pos

pri write_statistics_line(): result | pos
  ' write statistics line
  pos := 0
  line_buffer[0] := "S"
  line_buffer[1] := ":"
  pos := 2

  pos += util.encode_hex_nibbles(@line_buffer + pos, total_samples, 8)
  line_buffer[pos] := ":"
  pos += 1
  pos += util.encode_hex_nibbles(@line_buffer + pos, avg_timediff, 8)
  line_buffer[pos] := ":"
  pos += 1
  pos += util.encode_hex_nibbles(@line_buffer + pos, max_timediff, 8)
  line_buffer[pos] := ":"
  pos += 1
  pos += util.encode_hex_nibbles(@line_buffer + pos, max_sample, 8)

  line_buffer[pos] := 10 ' nl
  pos += 1
  fat.writeData(@line_buffer, pos)
  return pos

pri find_last_file_index() : result | name, h
  result := 0
  repeat
    fat.listEntries("N")
    name := fat.listName()
    if strsize(name) == 0
      quit
    if strsize(name) == 12 and util.startswith(string("RQADS"), name) and !util.endswith(string("~1.DAT"), name)
      h := util.decode_hex_nibbles(name + 5, 3)
      debug("found RQADSXXX.DAT", zstr(name), udec(fat.listSize()))
      result #>= h
  result &= $fff
