con
  _clkfreq = 160_000_000

  ' The USB serial
  RX0     = 63
  TX0     = 62
  BR_SERIAL = 115200

  DEBUG_BAUD  = 230_400

  ADC_CLK = 16
  ADC_SDO = 17
  ADC_SDI = 18
  ADC_DRDY = 19
  ADC_CS = 20
  ADC_PDWN = 21

  LF = $a
  CR = $d
  DOLLAR = $24
  ASTERISK = $2a

  INSTRUCTION_BUFFER_SIZE = 8
  BUFFER_SIZE = 100
  SERIAL_BUFFER_SIZE = 1024

  SD_DO = 58
  SD_DI = 59
  SD_CS = 60
  SD_CLK = 61

var
  BYTE instruction_buffer[INSTRUCTION_BUFFER_SIZE]
  LONG read
  LONG write
  LONG buffer[BUFFER_SIZE * 2]
  BYTE serial_input_buffer[6]  ' We always start with $RQADS
  BYTE payload[SERIAL_BUFFER_SIZE - 6]
  BYTE serial_input_buffer_pos
  BYTE serial_output_preamble[6] ' Again $RQADS
  BYTE serial_output_buffer[SERIAL_BUFFER_SIZE]
obj
  adc : "buffered_ads1256"
  serial : "jm_fullduplexserial"
  fat: "FAT32"

pub main() | c, correct, success
  success := fat.FATEngineStart(SD_DO, SD_CLK, SD_DI, SD_CS, 0)
  debug(zstr(string("fatenginestart:")))
  debug(udec(success))

  success := fat.mountPartition(0)
  debug(zstr(string("mount:")))
  debug(udec(success))

  success := fat.listEntries("N")
  debug(zstr(string("listEntries:")))
  debug(udec(success))

  success := fat.listName()
  debug(zstr(string("listName:")))
  debug(zstr(success))

  bytemove(@serial_output_preamble, string("$RQADS"), 6)

  serial.start(RX0, TX0, %0000, BR_SERIAL)
  read := BUFFER_SIZE
  adc.start(ADC_SDI, ADC_SDO, ADC_CLK, ADC_CS, ADC_DRDY, ADC_PDWN, @read)

  serial_input_buffer_pos := 0

  repeat
    if serial.available() > 0
      repeat serial.available()
        c := serial.rx()
        serial_input_buffer[serial_input_buffer_pos] := c
        serial_input_buffer_pos := (serial_input_buffer_pos + 1) +// SERIAL_BUFFER_SIZE
        serial_input_buffer[serial_input_buffer_pos] := 0 ' terminate

        if c == LF
          if rq_datagram()
            correct := rq_process()
          reset_buffer()

pri reset_buffer()
  serial_input_buffer_pos := 0

pri rq_datagram() : result | p, wire_checksum, local_checksum
  {{
  A correct datagram looks like this:

  $RQADS<instructions>*CS\r\n

  where CS is a 1-byte checksum built by XOR'ing together
  all characters between $ and *, and then represented
  as hexadecimal character.

  None of the bytes in <instructions> is allowed to be \r or \n
  }}
  result := false
  if serial_input_buffer_pos >= 11 ' $RQADS*AB\r\n is 11 characters long
    p := serial_input_buffer_pos
    if serial_input_buffer[0] == DOLLAR and serial_input_buffer[p - 1] == LF and serial_input_buffer[p - 2] == CR and serial_input_buffer[p - 5] == ASTERISK
      wire_checksum := decode_nibble(serial_input_buffer[p - 4]) << 4 | decode_nibble(serial_input_buffer[p - 3])
      local_checksum := compute_checksum(@serial_input_buffer[1], @serial_input_buffer[p - 6])
      result := wire_checksum == local_checksum
  return result

pri rq_process() : result | payload_length
  payload_length := serial_input_buffer_pos - 6 - 5 ' remove $RQADS and *XX\r\n
  case payload[0]
    "P" : result := rq_ping(payload_length)

pri rq_ping(payload_length) : result
  if payload_length <> 1
    return FALSE
  rq_send_str(string("P"))
  return TRUE

pri rq_send_str(str_addr) | l
  l := strsize(str_addr)
  bytemove(@serial_output_buffer, str_addr, l)
  rq_finalize(l)
  serial.substr(@serial_output_preamble, 6 + 5 + l)

pri rq_finalize(length) | checksum, i
  checksum := 0
  repeat i from 1 to length + 5 ' the RQADS is included in the checksum!
    checksum ^= serial_output_preamble[i]
  serial_output_buffer[length] := ASTERISK
  serial_output_buffer[length + 1] := encode_nibble(checksum >> 4)
  serial_output_buffer[length + 2] := encode_nibble(checksum & $f)
  serial_output_buffer[length + 3] := 13 ' \r
  serial_output_buffer[length + 4] := 10 ' \n

pri decode_nibble(c) : result
  result := c - $30 ' convert from ascii into 0..9
  if result > 9 ' we assume A-F
    result &= %1011111 ' enforce upper case ASCII
    result -= 7

pri encode_nibble(c) : result
  result := c + $30 ' convert to ascii 0..9
  if c > 9 ' we are in A-F territory
    result += 7

pri compute_checksum(start, stop) : result | i
  result := 0
  repeat i from start to stop
    result ^= BYTE[i]
  return result